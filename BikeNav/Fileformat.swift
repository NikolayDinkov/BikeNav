// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: fileformat.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//* Copyright (c) 2010 Scott A. Crosby. <scott@sacrosby.com>
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of
//this software and associated documentation files (the "Software"), to deal in
//the Software without restriction, including without limitation the rights to
//use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
//of the Software, and to permit persons to whom the Software is furnished to do
//so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct OSMPBF_Blob {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// When compressed, the uncompressed size
  var rawSize: Int32 {
    get {return _rawSize ?? 0}
    set {_rawSize = newValue}
  }
  /// Returns true if `rawSize` has been explicitly set.
  var hasRawSize: Bool {return self._rawSize != nil}
  /// Clears the value of `rawSize`. Subsequent reads from it will return its default value.
  mutating func clearRawSize() {self._rawSize = nil}

  var data: OSMPBF_Blob.OneOf_Data? = nil

  /// No compression
  var raw: Data {
    get {
      if case .raw(let v)? = data {return v}
      return Data()
    }
    set {data = .raw(newValue)}
  }

  /// Possible compressed versions of the data.
  var zlibData: Data {
    get {
      if case .zlibData(let v)? = data {return v}
      return Data()
    }
    set {data = .zlibData(newValue)}
  }

  /// For LZMA compressed data (optional)
  var lzmaData: Data {
    get {
      if case .lzmaData(let v)? = data {return v}
      return Data()
    }
    set {data = .lzmaData(newValue)}
  }

  /// Formerly used for bzip2 compressed data. Deprecated in 2010.
  var obsoleteBzip2Data: Data {
    get {
      if case .obsoleteBzip2Data(let v)? = data {return v}
      return Data()
    }
    set {data = .obsoleteBzip2Data(newValue)}
  }

  /// For LZ4 compressed data (optional)
  var lz4Data: Data {
    get {
      if case .lz4Data(let v)? = data {return v}
      return Data()
    }
    set {data = .lz4Data(newValue)}
  }

  /// For ZSTD compressed data (optional)
  var zstdData: Data {
    get {
      if case .zstdData(let v)? = data {return v}
      return Data()
    }
    set {data = .zstdData(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Data: Equatable {
    /// No compression
    case raw(Data)
    /// Possible compressed versions of the data.
    case zlibData(Data)
    /// For LZMA compressed data (optional)
    case lzmaData(Data)
    /// Formerly used for bzip2 compressed data. Deprecated in 2010.
    case obsoleteBzip2Data(Data)
    /// For LZ4 compressed data (optional)
    case lz4Data(Data)
    /// For ZSTD compressed data (optional)
    case zstdData(Data)

  #if !swift(>=4.1)
    static func ==(lhs: OSMPBF_Blob.OneOf_Data, rhs: OSMPBF_Blob.OneOf_Data) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.raw, .raw): return {
        guard case .raw(let l) = lhs, case .raw(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.zlibData, .zlibData): return {
        guard case .zlibData(let l) = lhs, case .zlibData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.lzmaData, .lzmaData): return {
        guard case .lzmaData(let l) = lhs, case .lzmaData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.obsoleteBzip2Data, .obsoleteBzip2Data): return {
        guard case .obsoleteBzip2Data(let l) = lhs, case .obsoleteBzip2Data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.lz4Data, .lz4Data): return {
        guard case .lz4Data(let l) = lhs, case .lz4Data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.zstdData, .zstdData): return {
        guard case .zstdData(let l) = lhs, case .zstdData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _rawSize: Int32? = nil
}

struct OSMPBF_BlobHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: String {
    get {return _type ?? String()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var indexdata: Data {
    get {return _indexdata ?? Data()}
    set {_indexdata = newValue}
  }
  /// Returns true if `indexdata` has been explicitly set.
  var hasIndexdata: Bool {return self._indexdata != nil}
  /// Clears the value of `indexdata`. Subsequent reads from it will return its default value.
  mutating func clearIndexdata() {self._indexdata = nil}

  var datasize: Int32 {
    get {return _datasize ?? 0}
    set {_datasize = newValue}
  }
  /// Returns true if `datasize` has been explicitly set.
  var hasDatasize: Bool {return self._datasize != nil}
  /// Clears the value of `datasize`. Subsequent reads from it will return its default value.
  mutating func clearDatasize() {self._datasize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: String? = nil
  fileprivate var _indexdata: Data? = nil
  fileprivate var _datasize: Int32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "OSMPBF"

extension OSMPBF_Blob: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Blob"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "raw_size"),
    1: .same(proto: "raw"),
    3: .standard(proto: "zlib_data"),
    4: .standard(proto: "lzma_data"),
    5: .standard(proto: "OBSOLETE_bzip2_data"),
    6: .standard(proto: "lz4_data"),
    7: .standard(proto: "zstd_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.data != nil {try decoder.handleConflictingOneOf()}
          self.data = .raw(v)
        }
      }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._rawSize) }()
      case 3: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.data != nil {try decoder.handleConflictingOneOf()}
          self.data = .zlibData(v)
        }
      }()
      case 4: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.data != nil {try decoder.handleConflictingOneOf()}
          self.data = .lzmaData(v)
        }
      }()
      case 5: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.data != nil {try decoder.handleConflictingOneOf()}
          self.data = .obsoleteBzip2Data(v)
        }
      }()
      case 6: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.data != nil {try decoder.handleConflictingOneOf()}
          self.data = .lz4Data(v)
        }
      }()
      case 7: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.data != nil {try decoder.handleConflictingOneOf()}
          self.data = .zstdData(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .raw(let v)? = self.data {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rawSize {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    switch self.data {
    case .zlibData?: try {
      guard case .zlibData(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }()
    case .lzmaData?: try {
      guard case .lzmaData(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }()
    case .obsoleteBzip2Data?: try {
      guard case .obsoleteBzip2Data(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }()
    case .lz4Data?: try {
      guard case .lz4Data(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    }()
    case .zstdData?: try {
      guard case .zstdData(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
    }()
    default: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OSMPBF_Blob, rhs: OSMPBF_Blob) -> Bool {
    if lhs._rawSize != rhs._rawSize {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OSMPBF_BlobHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BlobHeader"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "indexdata"),
    3: .same(proto: "datasize"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._datasize == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._indexdata) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._datasize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._indexdata {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._datasize {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OSMPBF_BlobHeader, rhs: OSMPBF_BlobHeader) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._indexdata != rhs._indexdata {return false}
    if lhs._datasize != rhs._datasize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
